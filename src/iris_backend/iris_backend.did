type BitcoinUtxo = record {
  txid : text;
  vout : nat32;
  value : nat64;
  confirmations : nat32;
};

type Currency = variant {
  USD;
  GBP;
  SGD;
  IDR;
};

type CreateInvoiceRequest = record {
  merchant_id : text;
  fiat_amount : float64;
  currency : Currency;
  description : opt text;
};

type CreateMerchantRequest = record {
  business_name : text;
};

type Invoice = record {
  id : text;
  merchant_id : text;
  amount_satoshi : nat64;
  bitcoin_address : text;
  status : PaymentStatus;
  created_at : nat64;
  updated_at : nat64;
  description : opt text;
  currency : Currency;
  fiat_amount : float64;
};

type MerchantProfile = record {
  merchant_principal : principal;
  business_name : text;
  created_at : nat64;
  total_invoices : nat64;
};

type PaymentStatus = variant {
  Pending;
  Confirmed;
  Completed;
  Failed;
};

type QRCodeData = record {
  bitcoin_address : text;
  amount_satoshi : nat64;
  invoice_id : text;
  qr_code_svg : text;
  bitcoin_uri : text;
};

type CashoutRequest = record {
  id : text;
  merchant_principal : principal;
  amount_satoshi : nat64;
  target_currency : Currency;
  fiat_amount : float64;
  status : CashoutStatus;
  created_at : nat64;
  bank_details : opt text;
};

type CashoutStatus = variant {
  Pending;
  Processing;
  Completed;
  Failed;
};

type CreateCashoutRequest = record {
  amount_satoshi : nat64;
  target_currency : Currency;
  bank_details : opt text;
};

type MerchantBalance = record {
  merchant_principal : principal;
  total_satoshi : nat64;
  pending_satoshi : nat64;
  confirmed_satoshi : nat64;
  preferred_currency : Currency;
  last_updated : nat64;
};

type UserRole = variant {
  Customer;
  Merchant;
};

type UserProfile = record {
  user_principal : principal;
  role : UserRole;
  created_at : nat64;
};

type RegisterUserRequest = record {
  role : UserRole;
};


type Result = variant { Ok : Invoice; Err : text };
type Result_1 = variant { Ok : MerchantProfile; Err : text };
type Result_2 = variant { Ok : PaymentStatus; Err : text };
type Result_3 = variant { Ok : QRCodeData; Err : text };
type Result_4 = variant { Ok : nat64; Err : text };
type Result_5 = variant { Ok : vec BitcoinUtxo; Err : text };
type Result_6 = variant { Ok : vec Invoice; Err : text };
type Result_7 = variant { Ok : MerchantBalance; Err : text };
type Result_8 = variant { Ok : CashoutRequest; Err : text };
type Result_9 = variant { Ok : vec CashoutRequest; Err : text };
type Result_10 = variant { Ok; Err : text };
type Result_11 = variant { Ok : UserProfile; Err : text };


service : {
  register_user : (RegisterUserRequest) -> (Result_11);
  get_user_profile : () -> (Result_11) query;
  check_payment : (text) -> (Result_2);
  create_cashout_request : (CreateCashoutRequest) -> (Result_8);
  create_invoice : (CreateInvoiceRequest) -> (Result);
  generate_qr_code : (text) -> (Result_3);
  get_bitcoin_balance : (text) -> (Result_4);
  get_bitcoin_utxos : (text) -> (Result_5);
  get_invoice : (text) -> (Result);
  get_merchant_balance : () -> (Result_7) query;
  get_merchant_profile : () -> (Result_1) query;
  get_my_cashout_requests : () -> (Result_9) query;
  get_my_invoices : () -> (Result_6) query;
  greet : (text) -> (text) query;
  register_merchant : (CreateMerchantRequest) -> (Result_1);
  simulate_payment : (text) -> (Result_2);
  update_merchant_balance : (text) -> (Result_10);
  whoami : () -> (text) query;
  simulate_payment_confirmed : (text) -> (Result_2);
}